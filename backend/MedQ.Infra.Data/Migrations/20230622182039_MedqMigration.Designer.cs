// <auto-generated />
using System;
using MedQ.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedQ.Infra.Data.Migrations
{
    [DbContext(typeof(MedQContext))]
    [Migration("20230622182039_MedqMigration")]
    partial class MedqMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("MedQ.Domain.Entities.AgendamentoDisponiveis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data");

                    b.Property<int>("Disponibilidade")
                        .HasColumnType("int")
                        .HasColumnName("disponibilidade");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_estabelecimento_id");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hora");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_medico_id");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("tb_agendamentos_disponiveis");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Dia")
                        .HasColumnType("longtext")
                        .HasColumnName("dia");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_estabelecimento_id");

                    b.Property<DateTime>("HoraFim")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("horario_final");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("horario_inicio");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("tb_calendario");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Consultas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AgendamentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_agendamento_id");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_estabelecimento_id");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hora");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext")
                        .HasColumnName("senha");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("fk_socio_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AgendamentoId");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("SocioId");

                    b.ToTable("tb_consultas");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("tb_especialidade");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Estabelecimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext")
                        .HasColumnName("bairro");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext")
                        .HasColumnName("cidade");

                    b.Property<string>("Complemento")
                        .HasColumnType("longtext")
                        .HasColumnName("complemento");

                    b.Property<DateTime>("Data_Cadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext")
                        .HasColumnName("endereco");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<string>("Image")
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("fk_socio_id");

                    b.Property<int>("TipoEstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_tipo_estabelecimento_id");

                    b.HasKey("Id");

                    b.HasIndex("SocioId");

                    b.HasIndex("TipoEstabelecimentoId");

                    b.ToTable("tb_estabelecimento");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Fila", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int")
                        .HasColumnName("fk_especialidade_id");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_estabelecimento_id");

                    b.Property<int>("QtdPessoas")
                        .HasColumnType("int")
                        .HasColumnName("qtd_pessoas");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("TipoAntendimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_tipo_atendimento_id");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("TipoAntendimentoId");

                    b.ToTable("tb_fila");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext")
                        .HasColumnName("cpf");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int")
                        .HasColumnName("fk_especialidade_id");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_estabelecimento_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("tb_medicos");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Mensagens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hora");

                    b.Property<string>("Resumo")
                        .HasColumnType("longtext")
                        .HasColumnName("resumo");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("fk_socio_id");

                    b.Property<string>("Texto")
                        .HasColumnType("longtext")
                        .HasColumnName("texto");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext")
                        .HasColumnName("titulo");

                    b.Property<int>("Viewd")
                        .HasColumnType("int")
                        .HasColumnName("viewed");

                    b.HasKey("Id");

                    b.HasIndex("SocioId");

                    b.ToTable("tb_mensagens");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.MinhasConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int")
                        .HasColumnName("fk_consultas_id");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data");

                    b.Property<string>("Finished")
                        .HasColumnType("longtext")
                        .HasColumnName("finished");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hora");

                    b.Property<string>("Pedido")
                        .HasColumnType("longtext")
                        .HasColumnName("pedido");

                    b.Property<string>("Profissional")
                        .HasColumnType("longtext")
                        .HasColumnName("profissional");

                    b.Property<string>("Resumo")
                        .HasColumnType("longtext")
                        .HasColumnName("resumo");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext")
                        .HasColumnName("senha");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("fk_socio_id");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("Texto")
                        .HasColumnType("longtext")
                        .HasColumnName("texto");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("SocioId");

                    b.ToTable("tb_minhas_consultas");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Socio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext")
                        .HasColumnName("bairro");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext")
                        .HasColumnName("cpf");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext")
                        .HasColumnName("cidade");

                    b.Property<string>("CodigoVerificacao")
                        .HasColumnType("longtext")
                        .HasColumnName("codigo_verificacao");

                    b.Property<string>("Complemento")
                        .HasColumnType("longtext")
                        .HasColumnName("complemento");

                    b.Property<DateTime>("Data_Cadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext")
                        .HasColumnName("endereco");

                    b.Property<string>("IdGoogle")
                        .HasColumnType("longtext")
                        .HasColumnName("id_google");

                    b.Property<string>("Image")
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext")
                        .HasColumnName("senha");

                    b.Property<string>("Sexo")
                        .HasColumnType("longtext")
                        .HasColumnName("sexo");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.Property<string>("UF")
                        .HasColumnType("longtext")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.ToTable("tb_socio");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("DDD")
                        .HasColumnType("longtext")
                        .HasColumnName("DDD");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_estabelecimento_id");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext")
                        .HasColumnName("numero");

                    b.Property<int>("SocioId")
                        .HasColumnType("int")
                        .HasColumnName("tb_socio_id");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("SocioId");

                    b.ToTable("tb_telefone");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.TipoAtendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("tb_tipo_atendimento");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.TipoEstabelecimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("tb_tipo_estabelecimento");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.AgendamentoDisponiveis", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Estabelecimento", "Estabelecmento")
                        .WithMany("AgendamentoDisponiveis")
                        .HasForeignKey("EstabelecimentoId")
                        .HasConstraintName("fk_estabelecimento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.Medico", "Medico")
                        .WithMany("AgendamentoDisponiveis")
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("fk_medico_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estabelecmento");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Calendario", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Estabelecimento", "Estabelecimento")
                        .WithMany("Calendarios")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Consultas", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.AgendamentoDisponiveis", "Agendamento")
                        .WithMany("Consultas")
                        .HasForeignKey("AgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.Estabelecimento", "Estabelecimento")
                        .WithMany("Consultas")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.Socio", "Socio")
                        .WithMany("Consultas")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agendamento");

                    b.Navigation("Estabelecimento");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Estabelecimento", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Socio", "Socio")
                        .WithMany("Estabelecimentos")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.TipoEstabelecimento", "TipoEstbelecimento")
                        .WithMany("Estabelecimentos")
                        .HasForeignKey("TipoEstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Socio");

                    b.Navigation("TipoEstbelecimento");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Fila", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany("Filas")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.Estabelecimento", "Estabelecimento")
                        .WithMany("Filas")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.TipoAtendimento", "TipoAtendimento")
                        .WithMany("Filas")
                        .HasForeignKey("TipoAntendimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Estabelecimento");

                    b.Navigation("TipoAtendimento");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Medico", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.Estabelecimento", "Estabelecimento")
                        .WithMany("Medicos")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Mensagens", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Socio", "Socio")
                        .WithMany("Mensagens")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.MinhasConsulta", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Consultas", "Consulta")
                        .WithMany("MinhasConsultas")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.Socio", "Socio")
                        .WithMany("MinhasConsultas")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Telefone", b =>
                {
                    b.HasOne("MedQ.Domain.Entities.Estabelecimento", "Estabelecimento")
                        .WithMany("Telefones")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedQ.Domain.Entities.Socio", "Socio")
                        .WithMany("Telefones")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estabelecimento");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedQ.Domain.Entities.AgendamentoDisponiveis", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Consultas", b =>
                {
                    b.Navigation("MinhasConsultas");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Especialidade", b =>
                {
                    b.Navigation("Filas");

                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Estabelecimento", b =>
                {
                    b.Navigation("AgendamentoDisponiveis");

                    b.Navigation("Calendarios");

                    b.Navigation("Consultas");

                    b.Navigation("Filas");

                    b.Navigation("Medicos");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Medico", b =>
                {
                    b.Navigation("AgendamentoDisponiveis");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.Socio", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Estabelecimentos");

                    b.Navigation("Mensagens");

                    b.Navigation("MinhasConsultas");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.TipoAtendimento", b =>
                {
                    b.Navigation("Filas");
                });

            modelBuilder.Entity("MedQ.Domain.Entities.TipoEstabelecimento", b =>
                {
                    b.Navigation("Estabelecimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
